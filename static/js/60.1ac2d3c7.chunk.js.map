{"version":3,"file":"static/js/60.1ac2d3c7.chunk.js","mappings":"+NACA,EAA8B,sC,uCC6D9B,EArDyB,WACvB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,EAAG,GAAAC,OAAMC,EAAAA,GAAQ,WAAAD,OAAUH,EAAO,qBAAAG,OAAoBE,EAAAA,IAE5DC,GAAqCC,EAAAA,EAAAA,GAAeL,GAA5CM,EAASF,EAATE,UAAWC,EAAOH,EAAPG,QAASC,EAAIJ,EAAJI,KAE5B,GAAIF,EACF,OAAOG,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IAEjB,GAAIH,EACF,OAAOE,EAAAA,EAAAA,KAACE,EAAAA,EAAS,IAGnB,GAAIH,EAAM,CACR,IAAMI,EAAaJ,EAAKK,QAExB,OAA0B,IAAtBD,EAAWE,QAEXC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEP,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACC,MAAOD,EAAAA,EAAAA,0BACdR,EAAAA,EAAAA,KAAA,MAAIU,MAAO,CAAEC,UAAW,UAAWJ,SAAC,iCAKtCP,EAAAA,EAAAA,KAAA,OAAAO,SACGJ,EAAWS,KAAI,SAAAC,GACd,IAAAC,EAA8BD,EAAOE,eAA7BC,EAAIF,EAAJE,KAAMC,EAAWH,EAAXG,YACRC,EAAgBL,EAAOM,QACvBC,EAAKP,EAAOO,GAClB,OACEd,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,WAASS,GAAQ,cACrBhB,EAAAA,EAAAA,KAAA,OACEqB,IACEJ,EAAW,kCAAAzB,OAC2ByB,GAClCK,EAENC,IAAKP,EACLQ,UAAWd,KAEbV,EAAAA,EAAAA,KAAA,KAAAO,SACGW,GAAgC,+BAZ3BE,EAgBd,KAIR,CACF,C","sources":["webpack://react-homework-template/./src/components/pages-components/MovieReviewsInfo/MovieReviewsInfo.module.css?be52","components/pages-components/MovieReviewsInfo/MovieReviewsInfo.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviewImage\":\"MovieReviewsInfo_reviewImage__bHgHO\"};","import { useParams } from 'react-router-dom';\nimport { API_KEY, BASE_URL } from 'components/utils/utils';\nimport { useFetchMovies } from 'components/utils/fetchMovies';\nimport avatarImg from '../MovieCastInfo/avatartImage.png';\nimport style from './MovieReviewsInfo.module.css';\nimport Loading from '../Loading/Loading';\nimport ErrorPage from '../Error';\nimport { Empty } from 'antd';\n\nconst MovieReviewsInfo = () => {\n  const { movieId } = useParams();\n  const url = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`;\n\n  const { isLoading, isError, data } = useFetchMovies(url);\n\n  if (isLoading) {\n    return <Loading />;\n  }\n  if (isError) {\n    return <ErrorPage />;\n  }\n\n  if (data) {\n    const reviewData = data.results;\n\n    if (reviewData.length === 0) {\n      return (\n        <div>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n          <h2 style={{ textAlign: 'center' }}>No review for this movie</h2>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          {reviewData.map(review => {\n            const { name, avatar_path } = review.author_details;\n            const reviewContent = review.content;\n            const id = review.id;\n            return (\n              <div key={id}>\n                <h3>Author: {name || 'Unknown'}</h3>\n                <img\n                  src={\n                    avatar_path\n                      ? `https://image.tmdb.org/t/p/w500${avatar_path}`\n                      : avatarImg\n                  }\n                  alt={name}\n                  className={style.reviewImage}\n                />\n                <p>\n                  {reviewContent ? reviewContent : 'no review for this movie'}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      );\n    }\n  }\n};\nexport default MovieReviewsInfo;\n"],"names":["movieId","useParams","url","concat","BASE_URL","API_KEY","_useFetchMovies","useFetchMovies","isLoading","isError","data","_jsx","Loading","ErrorPage","reviewData","results","length","_jsxs","children","Empty","image","style","textAlign","map","review","_review$author_detail","author_details","name","avatar_path","reviewContent","content","id","src","avatarImg","alt","className"],"sourceRoot":""}