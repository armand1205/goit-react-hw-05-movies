{"version":3,"file":"static/js/214.2a44e89c.chunk.js","mappings":"sNACA,EAAgC,qCAAhC,EAAqF,qCAArF,EAAsI,iCAAtI,EAAkL,gC,iDCyDlL,EAjDsB,WACpB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,EAAG,GAAAC,OAAMC,EAAAA,GAAQ,WAAAD,OAAUH,EAAO,qBAAAG,OAAoBE,EAAAA,IAE5DC,GAAqCC,EAAAA,EAAAA,GAAeL,GAA5CM,EAASF,EAATE,UAAWC,EAAOH,EAAPG,QAASC,EAAIJ,EAAJI,KAE5B,GAAIF,EACF,OAAOG,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IAEjB,GAAIH,EACF,OAAOE,EAAAA,EAAAA,KAACE,EAAAA,EAAS,IAGnB,GAAIH,EAAM,CACR,IAAMI,EAAOJ,EAAKI,KAElB,OAAoB,IAAhBA,EAAKC,QAELC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEN,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CAACC,MAAOD,EAAAA,EAAAA,0BACdP,EAAAA,EAAAA,KAAA,MAAIS,MAAO,CAAEC,UAAW,UAAWJ,SAAC,+BAMxCN,EAAAA,EAAAA,KAAA,MAAIW,UAAWF,EAAoBH,SAChCH,EAAKS,KAAI,SAAAC,GACR,IAAQC,EAAoDD,EAApDC,QAASC,EAA2CF,EAA3CE,aAAcC,EAA6BH,EAA7BG,UAAWC,EAAkBJ,EAAlBI,cAC1C,OACEZ,EAAAA,EAAAA,MAAA,MAAkBM,UAAWF,EAAoBH,SAAA,EAC/CN,EAAAA,EAAAA,KAAA,OACEkB,IACEH,EAAY,kCAAAvB,OAC0BuB,GAClCI,EAENC,IAAKJ,EACLL,UAAWF,KAEbJ,EAAAA,EAAAA,MAAA,KAAGM,UAAWF,EAAeH,SAAA,CAAC,cAAYU,MAC1CX,EAAAA,EAAAA,MAAA,KAAGM,UAAWF,EAAeH,SAAA,CAAC,SAAOW,OAX9BH,EAcb,KAGN,CACF,C","sources":["webpack://react-homework-template/./src/components/pages-components/MovieCastInfo/MovieCastInfo.module.css?4c3e","components/pages-components/MovieCastInfo/MovieCastInfo.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieCastList\":\"MovieCastInfo_movieCastList__R3DB1\",\"movieCastItem\":\"MovieCastInfo_movieCastItem__Ef4gG\",\"castImage\":\"MovieCastInfo_castImage__rrlGY\",\"castName\":\"MovieCastInfo_castName__93UH3\"};","import { useParams } from 'react-router-dom';\nimport { API_KEY, BASE_URL } from 'components/utils/utils';\nimport { useFetchMovies } from 'components/utils/fetchMovies';\nimport style from './MovieCastInfo.module.css';\nimport avatarImg from './avatartImage.png';\nimport Loading from '../Loading/Loading';\nimport ErrorPage from '../Error';\nimport { Empty } from 'antd';\n\nconst MovieCastInfo = () => {\n  const { movieId } = useParams();\n  const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`;\n\n  const { isLoading, isError, data } = useFetchMovies(url);\n\n  if (isLoading) {\n    return <Loading />;\n  }\n  if (isError) {\n    return <ErrorPage />;\n  }\n\n  if (data) {\n    const cast = data.cast;\n\n    if (cast.length === 0) {\n      return (\n        <div>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n          <h2 style={{ textAlign: 'center' }}>No cast for this movie</h2>\n        </div>\n      );\n    }\n\n    return (\n      <ul className={style.movieCastList}>\n        {cast.map(movieCast => {\n          const { cast_id, profile_path, character, original_name } = movieCast;\n          return (\n            <li key={cast_id} className={style.movieCastItem}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : avatarImg\n                }\n                alt={character}\n                className={style.castImage}\n              />\n              <p className={style.castName}>Character: {character}</p>\n              <p className={style.castName}>Name: {original_name}</p>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n};\nexport default MovieCastInfo;\n"],"names":["movieId","useParams","url","concat","BASE_URL","API_KEY","_useFetchMovies","useFetchMovies","isLoading","isError","data","_jsx","Loading","ErrorPage","cast","length","_jsxs","children","Empty","image","style","textAlign","className","map","movieCast","cast_id","profile_path","character","original_name","src","avatarImg","alt"],"sourceRoot":""}